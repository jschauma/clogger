#! /usr/bin/env python2.7
#
# clogger writes data from stdin to the specified chat rooms
#
# Copyright (c) 2013, Twitter, Inc. All rights reserved.
#
# Originally written by Jan Schaumann <jschauma@twitter.com> in November
# 2013.

import BaseHTTPServer
import base64
import getopt
import getpass
import httplib
import json
import os
import platform
import pwd
import re
import socket
import ssl
import subprocess
import sys
import urllib

NAME = "clogger"
VERSION = "0.6"
AGENT_STRING = NAME + " " + VERSION

DEFAULTS = {
    "access_token"   : "",
    "campfire_token" : "",
    "campfire_host"  : "",
    "chat_type"      : "campfire",
    "config"         : "/etc/clogger.conf",
    "hipchat_host"   : "api.hipchat.com",
    "hipchat_token"  : "",
    "debug"          : False,
    "follow"         : False,
    "proxy_url"      : "",
    "proxy_user"     : "",
    "proxy_pass"     : "",
    "rooms"          : []
}

SUPPORTED_CHATS = [ "campfire", "hipchat" ]

EXIT_FAILURE = 1
EXIT_SUCCESS = 0

OSX = platform.system() == "Darwin"

###
### Classes
###

class Clogger(object):

    def __init__(self):
        """Construct a Clogger with default values."""
        self.config = DEFAULTS
        self.message = []
        self.verbosity = 0


    class Usage(Exception):
        """A simple exception that provides a usage statement and a return
        code."""

        def __init__(self, rval):
            self.err = rval
            self.msg = 'Usage: %s [-DVhv] [-c file] [-t type] -r room\n' % os.path.basename(sys.argv[0])
            self.msg += '\t-D       enable debugging mode\n'
            self.msg += '\t-V       print version information and exit\n'
            self.msg += '\t-c file  read configuration from this file\n'
            self.msg += '\t-h       print this message and exit\n'
            self.msg += '\t-r room  write message to this room\n'
            self.msg += '\t-t type  clog the chat system of the given type\n'
            self.msg += '\t-v       increase verbosity\n'


    def checkConfig(self):
        """Verify that the configuration we have is sane."""

        chat = self.config["chat_type"].lower()
        if not chat:
            sys.stderr.write("No chat_type defined!\n")
            sys.exit(EXIT_FAILURE)

        if chat not in SUPPORTED_CHATS:
            sys.stderr.write("Unsupported chat type '%s'.\n" % chat)
            sys.exit(EXIT_FAILURE)

        if (chat == "campfire" and not self.config["campfire_host"]) or \
            (chat == "hipchat" and not self.config["hipchat_host"]):
            sys.stderr.write("No API host specified.\n")
            sys.exit(EXIT_FAILURE)

        if not self.config["access_token"]:
            if chat == "campfire":
                self.config["access_token"] = self.config["campfire_token"]
            elif chat == "hipchat":
                self.config["access_token"] = self.config["hipchat_token"]


    def clog(self):
        """Read data from stdin and write it to the chat rooms."""
        self.verbose("Ready to clog...")

        if not self.message:
            # Implicit limitation: we read all content in at once.  This is
            # reasonable, because we normally only spit out short messages.
            # If we're being given more input than we can keep in memory,
            # let's just barf and abort.  GIGO.
            self.message = sys.stdin.readlines()

        chat = self.config["chat_type"]

        clog_func = None
        if chat == "campfire":
            clog_func = self.clogCampfire
        elif chat == "hipchat":
            clog_func = self.clogHipchat
        else:
            sys.stderr.write("Unsupported chat type -- how did we ever get here?\n")
            sys.exit(EXIT_FAILURE)

        if len(self.message) > 1:
            clog_func(self.getUserAtHost() + " says:")
            clog_func("".join(self.message), "PasteMessage")
        else:
            clog_func(self.getUserAtHost() + ": " + self.message[0].rstrip())


    def clogCampfire(self, message, messageType="TextMessage"):
        """Issue the request to send the data to Campfire."""

        self.verbose("Making '%s' request to Campfire..." % messageType, 2)
        self.verbose("Message:\n%s" % message, 3)

        data = { "message" : { "type" : messageType, "body" : message } }

        for room in self.config["rooms"]:
            self.verbose("Sending message to room %s..." % room, 3)
            url = "/room/" + room + "/speak.json"
            if not self.postData(url, data):
                sys.stderr.write("Unable to post message to room %s.\n" % room)


    def clogHipchat(self, message, messageType="Ignored"):
        self.verbose("Clogging Hipchat...", 2)

        data = {
                 'auth_token'     : self.config["access_token"],
                 'from'           : NAME,
                 'message_format' : "text",
                 'message'        : message
               }

        for room in self.config["rooms"]:
            self.verbose("Sending message to room %s..." % room, 3)
            data['room_id'] = room
            if not self.postData("/v1/rooms/message", data):
                sys.stderr.write("Unable to post message to room %s.\n" % room)


    def fclog(self):
        """Continously read data from stdin and write it one line at a time to
           the Campfire rooms."""
        self.verbose("Ready to clog continously...")
        while 1:
            self.message = sys.stdin.readline()
            if self.message == '':
                break
            self.clog()


    def getAccessToken(self):
        """Try to get the access token:
           - if on OS X, query the keychain; if present, use that
           - prompt user for token
           - if on OS X, store token in keychain
        """

        get_token_from_keychain = [ "security", "find-generic-password", "-s", "clogger", "-w" ]
        write_token_to_keychain = [ "security", "add-generic-password", "-a", getpass.getuser(), "-s", "clogger", "-w" ]

        devnull = None
        try:
            devnull = open(os.devnull, "w")
        except Exception, e:
            sys.stderr.write("Unable to open %s: %s\n" % (os.devnull, e.strerror))
            sys.exit(EXIT_FAILURE)

        if OSX:
            self.verbose("Trying to get the access token from the keychain...", 2)
            try:
                self.config["access_token"] = subprocess.check_output(get_token_from_keychain, stderr=devnull).strip()
                return
            except subprocess.CalledProcessError, e:
                pass

        self.verbose("No access token available, asking the user...", 2)
        self.config["access_token"] = getpass.getpass("%s API Access Token: " % self.config["chat_type"].capitalize())

        if OSX:
            write_token_to_keychain.append(self.config["access_token"])
            self.verbose("Storing access token in the keychain...", 2)
            try:
                subprocess.check_output(write_token_to_keychain)
            except subprocess.CalledProcessError, e:
                sys.stderr.write("Unable to store access token in your keychain.\n")
                sys.stderr.write("%s\n" % e.cmd)


    def getUserAtHost(self):
        """Create a string representing the username of the real-UID of
           this process @ the hostname component of the FQDN.  If the
           SUDO_UID environment variable is set, we try to get that user's
           information as well."""

        prefix = ""
        uid = os.getuid()
        try:
            user = pwd.getpwuid(uid).pw_name
        except KeyError, e:
            sys.stderr.write("Unable to get struct passwd for uid %d: %s\n" % (uid, e.strerror))
            sys.exit(EXIT_FAILURE)

        try:
            sudo_uid = os.getenv("SUDO_UID")
            prefix = pwd.getpwuid(int(sudo_uid)).pw_name + " as "
        except (KeyError, ValueError), e:
            prefix = "SUDO_UID='%s' " % sudo_uid
        except TypeError, e:
            # sudo_uid was None, ie environment variable not set
            pass

        return "%s%s@%s" % (prefix, user, socket.gethostname().split(".")[0])


    def makeProxySocket(self):
        """Create a fake SSL socket to the proxy.  Based on
           http://code.activestate.com/recipes/301740-simplest-useful-https-with-basic-proxy-authenticat/
        """

        (proxy_host, proxy_port) = self.config["proxy_url"].split(":", 2)
        proxy_port = int(proxy_port)
        self.verbose("Creating a Proxy socket to %s:%d..." % (proxy_host, proxy_port), 3)

        proxy_connect = "CONNECT %s:443 HTTP/1.0\r\n" % self.config["campfire_host"]
        proxy_auth_header = ""

        if self.config["proxy_user"] and self.config["proxy_pass"]:
            proxy_auth = base64.encodestring("%s:%s" % (self.config["proxy_user"],
                                              self.config["proxy_pass"])).replace('\n', '')
            proxy_auth_header = "Proxy-authorization: Basic %s\r\n" % proxy_auth
        proxy_pieces = proxy_connect + proxy_auth_header + "\r\n"

        proxy = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        proxy.connect((proxy_host, proxy_port))
        proxy.sendall(proxy_pieces)
        response = proxy.recv(proxy_port)
        status = response.split()[1]
        if status != str(200):
            sys.stderr.write("Unable to connect to proxy: %s\n" % str(status))
            return None

        return ssl.wrap_socket(proxy, None, None)


    def parseConfigFile(self):
        """Parse the configuration file and update any settings that were
        not specified on the command-line."""

        cfg = self.config["config"]

        self.verbose("Parsing config file ('%s')..." % cfg)

        n = 0
        keyval = re.compile("(?P<key>.+?)\s*=\s*(?P<val>.+)")

        try:
            f = open(cfg, 'r')
            for line in f.readlines():
                n += 1
                line = re.sub(r'#.*', '', line).strip()
                if line:
                    m = keyval.match(line)
                    if not m:
                        sys.stderr.write("Ignoring invalid syntax in line %d: '%s'\n" % (n, line))
                    else:
                        key = m.group('key').strip()
                        val = m.group('val').strip()
                        if self.config.has_key(key):
                            self.config[key] = val
                            # Do not leak an actual password onto the
                            # terminal or into logs.
                            if key in [ "access_token", "proxy_pass" ]:
                                val = "XXXXXX"
                            self.verbose("Setting %s to %s..." % (key, val), 2)
                        else:
                            sys.stderr.write("Ingoring unknown configuration parameter '%s'.\n" % key)
            f.close()

        except IOError, e:
            # If the default file exists, then we had an unexpected IO
            # error, so report.
            # If the default file does not exist, allow the user to
            # continue with default values without any errors.
            # If a non-default file can't be read for any reason, that's
            # an error.
            if os.path.exists(cfg) or cfg != DEFAULTS["config"]:
                sys.stderr.write("Unable to read '%s': %s\n" % (cfg, e.strerror))
                sys.exit(EXIT_FAILURE)


    def parseOptions(self, inargs):
        """Parse given command-line optoins and set appropriate
        attributes.

        Arguments:
            inargs -- arguments to parse

        Raises:
            Usage -- if '-h' or invalid command-line args are given
        """

        try:
            opts, args = getopt.getopt(inargs, "DVc:fhr:t:v")
        except getopt.GetoptError:
            raise self.Usage(EXIT_FAILURE)

        for option, argument in opts:
            if option in ("-D"):
                self.config["debug"] = True
            if option in ("-V"):
                print AGENT_STRING
                sys.exit(EXIT_SUCCESS)
                # NOTREACHED
            if option in ("-c"):
                self.config["config"] = argument
            if option in ("-h"):
                raise self.Usage(EXIT_SUCCESS)
            if option in ("-f"):
                self.config["follow"] = True
            if option in ("-r"):
                self.config["rooms"].append(argument)
            if option in ("-t"):
                self.config["chat_type"] = argument
            if option in ("-v"):
                self.verbosity += 1

        if self.config["follow"] and args:
            sys.stderr.write("You can't specify a message when using '-f'.\n")
            sys.exit(EXIT_FAILURE)
            # NOTREACHED

        if args:
            self.message = [ " ".join(args) ]

        if not self.config["rooms"]:
            sys.stderr.write("No rooms specified.\n")
            raise self.Usage(EXIT_FAILURE)


    def postData(self, uri, data):
        """Post the given data to the URL."""
        self.verbose("Posting data to '%s'..." % uri, 3)
        self.verbose(data, 4)

        api_host = self.config["campfire_host"]

        chat = self.config["chat_type"]

        if chat == "campfire":
            auth = base64.encodestring('%s:' % self.config["access_token"]).replace('\n', '')
            headers = { 'Content-Type'  : 'application/json',
                    'User-Agent'    : AGENT_STRING,
                    'Authorization' : 'Basic %s' % auth }
            data = json.dumps(data).encode()

        if chat == "hipchat":
            api_host = self.config["hipchat_host"]
            data = urllib.urlencode(data)
            headers = { 'Content-Type'  : 'application/x-www-form-urlencoded',
                        'Content-Length' : len(data),
                        'User-Agent'    : AGENT_STRING }

        fullurl = "https://" + api_host + uri

        if not self.config["debug"]:
            proxy_socket = None

            conn = httplib.HTTPSConnection(api_host)
            if self.verbosity > 2:
                conn.set_debuglevel(1)
            if self.config["proxy_url"]:
                proxy_socket = self.makeProxySocket()
                if not proxy_socket:
                    return False
                else:
                    conn.sock = proxy_socket

            try:
                conn.request("POST", uri, data, headers)
                res = conn.getresponse()
            except httplib.HTTPException, e:
                sys.stderr.write("Unable to make request at '%s': %s %s\n" % \
                                (fullurl, e.code, BaseHTTPServer.BaseHTTPRequestHandler.responses[e.code][0]))
                sys.stderr.write("Data posted:\n%s\n" % data)
                return False

            conn.close()

            if res.status != 200 and res.status != 201:
                sys.stderr.write("Unable to post to %s\n" % fullurl)
                sys.stderr.write("Got: %d %s\n" % (res.status, res.reason))
                return False
        return True


    def verbose(self, msg, level=1):
        """Print given message to STDERR if the object's verbosity is >=
        the given lefel."""

        if (self.verbosity >= level):
            sys.stderr.write("%s> %s\n" % ('=' * level, msg))

###
### "Main"
###

if __name__ == "__main__":
    try:
        clogger = Clogger()

        try:
            clogger.parseOptions(sys.argv[1:])
        except clogger.Usage, u:
            if (u.err == EXIT_FAILURE):
                out = sys.stderr
            else:
                out = sys.stdout
            out.write(u.msg)
            sys.exit(u.err)
            # NOTREACHED

        clogger.parseConfigFile()
        clogger.checkConfig()

        if not clogger.config["access_token"]:
            clogger.getAccessToken()

        if clogger.config["follow"]:
            clogger.fclog()
        else:
            clogger.clog()

    except KeyboardInterrupt:
        # catch ^C, so we don't get a "confusing" python trace
        sys.exit(EXIT_FAILURE)
